### This app settings

PORT=42003
WITH_SWAGGER=yes

### Other APIs connected to this one

API_CONTRACTS_FULL_URL=***secret***
API_AUTH_FULL_URL=***secret***

### AWS Cognito (used to get user and indirectly check the access token)

AWS_COGNITO_URL=https://cognito-idp.eu-central-1.amazonaws.com

### AWS S3

AWS_S3_REGION=eu-central-1
AWS_S3_BUCKET_NAME=opendairy-documents
AWS_S3_BUCKET_ARN=arn:aws:s3:::opendairy-documents
AWS_S3_ACCESS_KEY_ID=***secret***
AWS_S3_SECRET_ACCESS_KEY=***secret***

### Blockchain

## Alastria node
# BLOCKCHAIN_RPC_URL_PORT=***secret***
# BLOCKCHAIN_CHAIN_ID=83584648538

# Ganache for dev
BLOCKCHAIN_RPC_URL_PORT=http://127.0.0.1:7545
BLOCKCHAIN_CHAIN_ID=1337

BLOCKCHAIN_TX_GAS_PRICE=0
BLOCKCHAIN_TX_GAS_LIMIT=3000000
BLOCKCHAIN_TX_TYPE=0

### Admin setup
## Strategy for admin wallet creation and accounts contract deployment. Supported strategies are:
# FROM_FILE : will retrieve wallet and deployment address from adminSetup.json located at project root (in dist folder when built). If the file does not exist, a new wallet is created and a new accounts contract is deployed with this wallet. Then the setup file is created and stored. You should keep a backup of this file in cas you rebuilt the project.
# FROM_ENV : will retrieve wallet and deployment address from .env or environment variables ADMIN_WALLET_PRIVATE_KEY and ADMIN_CONTRACT_ACCOUNTS. You can use the create-wallet.js script to create a new wallet and you can call the API on admin controller to deploy the accounts contracts (see admin controllers). This is a quite long process as you will need to launch the script, then update .env with the private key, then launch the API, call the admin controller and update the .env again with the deployed address, then restart the API.
ADMIN_WALLET_STRATEGY=FROM_FILE
## Admin wallet and admin deployed accounts contract (if FROM_ENV strategy is used)
# GANACHE
# ADMIN_WALLET_PRIVATE_KEY=
# ADMIN_CONTRACT_ACCOUNTS=
# ALASTRIA
# ADMIN_WALLET_PRIVATE_KEY=
# ADMIN_CONTRACT_ACCOUNTS=
